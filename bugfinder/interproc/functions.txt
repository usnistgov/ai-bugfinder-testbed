match (cexpr:GenericNode {type:"CallExpression"})-[:IS_AST_PARENT]->(func:GenericNode {type:"Callee"})
where func.code in ["memcpy","memmove","gets","fgets","fgetws","sprintf","swprintf","strcat","wcscat","strncat","wcsncat","strcpy","wcscpy","strncpy","wcsncpy","wcstombs"]
with distinct cexpr
match (cexpr)-[:IS_AST_PARENT]->(:GenericNode {type:"ArgumentList"})-[:IS_AST_PARENT]->(arg:GenericNode {type:"Argument",childNum:"0"})
match (arg)-[:USE]->(sym:GenericNode {type:"Symbol"})<-[:USE]-(expr:DownstreamNode)
where expr.type in ["ExpressionStatement","IdentifierDeclStatement","ForInit","Condition"]
  and (expr)-[:IS_AST_PARENT*]->(cexpr)
merge (expr)-[r:DEF]->(sym)


match (cexpr:GenericNode {type:"CallExpression"})-[:IS_AST_PARENT]->(func:GenericNode {type:"Callee"})
where func.code in ["scanf","wscanf","fscanf","fwscanf","sscanf","swscanf"]
with distinct cexpr, case when func.code in ["scanf","wscanf"] then 1 else 2 end as offset
match (cexpr)-[:IS_AST_PARENT]->(:GenericNode {type:"ArgumentList"})-[:IS_AST_PARENT]->(arg:GenericNode {type:"Argument"})
where arg.childNum > offset
match (arg)-[:USE]->(sym:GenericNode {type:"Symbol"})<-[:USE]-(expr:DownstreamNode)
where expr.type in ["ExpressionStatement","IdentifierDeclStatement","ForInit","Condition"]
  and (expr)-[:IS_AST_PARENT*]->(cexpr)
merge (expr)-[r:DEF]->(sym)


memcpy 0
memmove 0
gets 0
fgets 0
fgetws 0
sprintf 0
swprintf 0
strcat 0
wcscat 0
strncat 0
wcsncat 0
strcpy 0
wcscpy 0
strncpy 0
wcsncpy 0
wcstombs 0


scanf >0
wscanf >0

fscanf >1
fwscanf >1
sscanf >1
swscanf >1
